name: 'tests Windows'

on:
  push:
    branches:
      - 'master'
  pull_request:

jobs:
  mingw:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64 # Start a 64 bit Mingw environment
          update: true

      - name: Install dependencies
        run: |
          C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm --needed git make"
          C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm --needed mingw-w64-x86_64-{toolchain,ffmpeg,python}"
          C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm --needed mingw-w64-x86_64-python3-{pillow,pip}"
          C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm --needed mingw-w64-x86_64-meson"

      - name: Build
        run: |
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          C:\msys64\usr\bin\bash -lc "make -j$(($(nproc)+1)) TARGET_OS=MinGW-w64"

  msvc:

    runs-on: windows-latest

    defaults:
      run:
        shell: wsl-bash {0}

    steps:
      - uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04

      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt -y update
          sudo apt -y install build-essential unzip wget python3-venv
          pip.exe install meson

      - name: Restore from cache and install vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgGitCommitId: 595777db2332a3442b73f9af9f656355f207aec9
          vcpkgTriplet: x64-windows
          vcpkgArguments: pthreads opengl-registry ffmpeg[ffmpeg,ffprobe] sdl2
          cleanAfterBuild: false

      #- name: Setup tmate
      #  if: always()
      #  run: |
      #    sudo apt -y update
      #    #Install tmate
      #    sudo apt-get install -y tmate openssh-client
      #    # Generate ssh key if needed
      #    [ -e ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
      #    # Run deamonized tmate
      #    echo Running tmate...
      #    tmate -S /tmp/tmate.sock new-session -d
      #    tmate -S /tmp/tmate.sock wait tmate-ready
      #    # Wait for connection
      #    while [ -S /tmp/tmate.sock ]; do
      #      # Print connection info
      #      tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
      #      sleep 1
      #    done

      - name: Build
        run: |
          export VCVARS64='"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
          bash build_scripts/windows/set_vcvars.sh
          export VCPKG_DIR='D:\a\gopro-lib-node.gl\gopro-lib-node.gl\vcpkg'
          source build_scripts/windows/setenv.sh
          make
